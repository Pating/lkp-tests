#!/bin/sh

. $LKP_SRC/lib/result.sh
. $LKP_SRC/lib/wait.sh

umask 002

any_pid_alive()
{
	local pidfile=$1
	local ps_out
	local pid

	# busybox ps does not accept any parameter
	ps_out=$(ps axho pid 2>/dev/null)

	if [ -n "$ps_out" ]; then
		echo "$ps_out" | grep -qFxf $pidfile
	else
		is_busybox_ps=1
		for pid in $(cat $pidfile)
		do
			test -d /proc/$pid && return
		done
		return 1
	fi
}

wait_for_monitors()
{
	local pidfile=$TMP/.pid-wait-monitors
	[ -s "$pidfile" ] || return 0

	echo wait for background monitors: $(cat $pidfile $TMP/.name-wait-monitors)

	for i in 1 2 3 4 5
	do
		sleep $i
		any_pid_alive $pidfile && continue
		return $i
	done

	echo "some monitors do not quit in time" >&2
	if [ -n "$is_busybox_ps" ]; then
		ps
	else
		ps axho pid | grep -Fxf $pidfile | xargs ps u >&2
		ps faux
	fi

	return $i
}

kill_monitors()
{
	local signal=$1
	local wait_pidfile="$TMP/.pid-wait-monitors"
	local pids
	local pid

	for pidfile in $TMP/pid-monitor-*
	do
		[ -s "$pidfile" ] || continue

		if [ -s "$wait_pidfile" ]; then
			pids=$(grep -v -x -F -f "$wait_pidfile" "$pidfile")
		else
			pids=$(cat "$pidfile")
		fi

		[ -n "$pids" ] || continue

		for pid in $pids
		do
			[ -d /proc/$pid ] || continue
			explain_kill $pids
			/bin/kill $signal $pids ||
			echo "failed to kill monitor ${pidfile##*/pid-monitor-}" >&2
		done
	done
}

# There are 2 kind of monitor termination mechanisms:
# 1) some smart monitors run setup_wait() and wait for the below post-test event
#    => $TMP/.pid-wait-monitors
$LKP_SRC/bin/event/wakeup activate-monitor
$LKP_SRC/bin/event/wakeup post-test
touch $TMP/post-run
sleep 1
# 2) most simple monitors run until being killed
#    => $TMP/pid-monitor-*
kill_monitors -INT

wait_for_monitors
sleep 1
kill_monitors -KILL

PERF_EVENT_DATA=$TMP/perf.data
[ -s "$PERF_EVENT_DATA" ] && {
	set_perf_path "/lkp/benchmarks/perf-profile/perf"
	$perf report --children --header -U -g folded,0.5,callee --sort=dso,symbol -i $PERF_EVENT_DATA |
	gzip > $RESULT_ROOT/perf-profile.gz && {
		rm -f $PERF_EVENT_DATA
	}
}

PERF_REPORT_SRCLINE_DATA=$TMP/perf-report-srcline.data
[ -s $PERF_REPORT_SRCLINE_DATA ] && {
	set_perf_path "/lkp/benchmarks/perf-report-srcline/perf"
	$perf report --header -i $PERF_REPORT_SRCLINE_DATA --no-children -f -v \
	      --stdio --sort sym,srcline -w 10,50,100 --full-source-path |
	gzip > $RESULT_ROOT/perf-report-srcline.gz &&
	rm -f $PERF_REPORT_SRCLINE_DATA
}

wait_for_pipe()
{
	local i
	local result

	# If setup scripts failed, monitors&tests won't run and .pid-pipes
	# will be missing.
	[ -e $TMP/.pid-pipes ] || return

	for i in $(seq 5)
	do
		sleep $i
		if has_cmd pgrep; then
			pgrep --pidfile $TMP/.pid-pipes 'tee|cat|gzip' >/dev/null && continue
		else
			any_pid_alive $TMP/.pid-pipes && continue
		fi
		break
	done

	for i in $(seq 5)
	do
		sleep $i

		for result in ${tmp_results}
		do
			[ "${result%.gz}" != "$result" ] || continue
			[ -s "$result" ] && continue

			echo "wait_for_pipe $i: empty $result"
			continue 2
		done

		return 0
	done

	echo "wait_for_pipe timeout $i" >&2

	# Throw out stderr when monitors did not start due to waiting on activate-monitor
	has_cmd pgrep &&
	pgrep -f "$LKP_SRC/bin/event/wait activate-monitor" >/dev/null &&
		echo "some monitors are blocked by activate-monitor" >&2

	ps faux 2>/dev/null || ps
	ls -l $TMP_RESULT_ROOT
	return 1
}

copy_results()
{
	[ -n "$TMP_RESULT_ROOT" ] || return
	[ "$TMP_RESULT_ROOT" = "$RESULT_ROOT" ] && return

	local tmp_results="$(find $TMP_RESULT_ROOT -type f -size +0)"
	[ -n "$tmp_results" ] || return

	# give chance to monitor fifo writer to sync data back to file
	wait_for_pipe

	upload_files $tmp_results
}

copy_time_files()
{
	local ret_copy_time_files=0

	for time_file in $TMP/*.time
	do
		[ -e "$time_file" ] || return

		if upload_files $time_file; then
			cat $time_file >> $TMP/time
		else
			ret_copy_time_files=1
		fi
	done

	[ -s $TMP/time ] && upload_files $TMP/time || return

	return $ret_copy_time_files
}

copy_results

copy_time_files || ps faux --cols 1000 2>/dev/null || ps > $RESULT_ROOT/time-debug

[ "$kconfig" = "x86_64-rhel_gcov" ] && [ -d /sys/kernel/debug/gcov ] && {
	$LKP_SRC/tools/gather-gcov-test $TMP/gcov-test.tar.gz
	upload_files $TMP/gcov-test.tar.gz
}

# the busybox reduced dmesg/truncate will refuse to run and it's not a big deal
dmesg --facility user --human --decode --color=always > $TMP/umesg 2>/dev/null
truncate --no-create --size='<10M' $TMP/output $TMP/stdout $TMP/stderr $TMP/umesg 2>/dev/null

upload_files	$TMP/boot-time	\
		$TMP/env.yaml	\
		$TMP/stdout	\
		$TMP/stderr	\
		$TMP/output	\
		$TMP/umesg
